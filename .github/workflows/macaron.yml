name: CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

env:
  # The version we want to pull https://oracle.github.io/macaron/pages/installation.html#download
  # Main implies latest.
  MACARON_TAG: "main"

# Macaron requires github Access token scoped to the repositories
# that you want to analyse.https://oracle.github.io/macaron/pages/installation.html#download
# You do not need to create a PAT as informed as "GITHUB_TOKEN" is automatically present in the enviornment
# You can set the permissions granted to the token though the following setting.
permissions:
  contents: read
  actions: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Set the environment variable to the provided github token that is scoped to this repository.
      # This will make it available to all steps under this build. If your pipeline requires different permissions for each build step
      # Follow this https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Macaron
        run: |
          # Ideally we would want to cache the docker image. This would be a TODO-
            curl -O https://raw.githubusercontent.com/oracle/macaron/${{ env.MACARON_TAG }}/scripts/release_scripts/run_macaron.sh
            chmod +x run_macaron.sh
            # You have to do --help here. Simply putting ./run_macaron.sh for the initial run will yield error code 64 and fail the build process
            # See: https://github.com/neilscallywag/macaron-test/actions/runs/14510714862/job/40708546519
            ./run_macaron.sh --help
            echo "Macaron version: ${{env.MACARON_TAG}} installed"

      - name: Sanity Check
        run: ./run_macaron.sh --help

      # https://oracle.github.io/macaron/pages/using.html#analyzing-a-public-github-repository
      - name: Analyse the SLSA posture
        run: |

          # Sanity checks
          echo "Current working directory: $(pwd)"
          echo "Contents of the current directory:"
          ls -la "$(pwd)"
          echo "Parent directory: $(dirname $(pwd))"
          echo "Absolute path of the parent directory: $(realpath $(dirname $(pwd)))"

          # Macaron first checks if the provided path is a local path. We can use this to analyse the checked-out repo in the earlier step
                                                      
          # We will analyse the local checkout repository
          # The below options have not worked for various reasons, leading to failure in build with
          # the script unable to either locate the repo or failing to recognise that the current repository is infact the git repo
          
          # This appends . at the end of the path without "/" - No git repo exists at /home/macaron/output/git_repos/local_repos.
          # https://github.com/neilscallywag/macaron-test/actions/runs/14512943389/job/40715554179
          # FOLDER_PATH="."  

          # Both of the below lead to : No such file or directory: '/home/runner'
          # https://github.com/neilscallywag/macaron-test/actions/runs/14512706476/job/40714812798
          # FOLDER_PATH="${GITHUB_WORKSPACE}"
          # FOLDER_PATH="${github.workspace}"

          # Trying with actual repository link within the pipeline
          FOLDER_PATH="https://github.com/neilscallywag/macaron-test"
          
          # Get the current branch (removes refs/heads/)
          BRANCH_NAME="${GITHUB_REF##*/}"    
          
          # Get the current commit digest (SHA)
          COMMIT_DIGEST="${GITHUB_SHA}"                                   

          echo "Analyzing repository: $FOLDER_PATH"
          echo "Branch: $BRANCH_NAME"
          echo "Commit digest: $COMMIT_DIGEST"

          # Run the analysis command
          ./run_macaron.sh analyze -rp "$FOLDER_PATH" -b "$BRANCH_NAME" -d "$COMMIT_DIGEST" --deps-depth=inf

      # Sanity check
      - name: List generated output files
        run: |
          echo "Listing the contents of the output directory:"
          ls -R ./


        



        
